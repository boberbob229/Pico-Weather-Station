#include <ESP8266WiFi.h> // Use <WiFi.h> for ESP32
#include <ESP8266WebServer.h>
#include <ArduinoJson.h>
#include <HTTPClient.h>

#define CONFIG_FILE "/wifi_config.json"

const char *apSSID = "PicoWeatherSetup";
const char *apPassword = "setup1234";
const char *apiKey = "YOUR_API_KEY"; // Replace with OpenWeather API Key
const char *city = "New York";
String apiUrl = "http://api.openweathermap.org/data/2.5/weather?q=" + String(city) + "&appid=" + String(apiKey) + "&units=metric";

ESP8266WebServer server(80);

void saveWiFiCredentials(String ssid, String password) {
    DynamicJsonDocument doc(256);
doc["ssid"] = ssid;
doc["password"] = password;

File file = SPIFFS.open(CONFIG_FILE, "w");
serializeJson(doc, file);
file.close();
}

bool loadWiFiCredentials(String &ssid, String &password) {
if (!SPIFFS.exists(CONFIG_FILE)) return false;

File file = SPIFFS.open(CONFIG_FILE, "r");
DynamicJsonDocument doc(256);
deserializeJson(doc, file);
ssid = doc["ssid"].as<String>();
password = doc["password"].as<String>();
file.close();
return true;
}

void startAccessPoint() {
WiFi.softAP(apSSID, apPassword);
Serial.println("AP Mode Started: Connect to 'PicoWeatherSetup'");
Serial.println("Open http://192.168.4.1/setup in a browser");

server.on("/setup", []() {
    server.send(200, "text/html", "<form action='/connect' method='post'><input name='ssid'><input name='password'><input type='submit'></form>");
});

server.on("/connect", []() {
    String ssid = server.arg("ssid");
String password = server.arg("password");
if (ssid.length() > 0 && password.length() > 0) {
    saveWiFiCredentials(ssid, password);
server.send(200, "text/plain", "Saved! Restarting...");
delay(2000);
ESP.restart();
} else {
    server.send(400, "text/plain", "Invalid data");
}
});

server.begin();
}

void fetchWeather() {
if (WiFi.status() == WL_CONNECTED) {
HTTPClient http;
http.begin(apiUrl);
int httpResponseCode = http.GET();
if (httpResponseCode == 200) {
String response = http.getString();
DynamicJsonDocument doc(1024);
deserializeJson(doc, response);
float temp = doc["main"]["temp"].as<float>();
String weather = doc["weather"][0]["description"].as<String>();
Serial.printf("%s: %.2fÂ°C, %s\n", city, temp, weather.c_str());
}
http.end();
} else {
Serial.println("WiFi Not Connected");
}
}

void setup() {
Serial.begin(115200);
SPIFFS.begin();
String ssid, password;
if (loadWiFiCredentials(ssid, password)) {
WiFi.begin(ssid.c_str(), password.c_str());
Serial.print("Connecting to WiFi");
for (int i = 0; i < 15 && WiFi.status() != WL_CONNECTED; i++) {
delay(1000);
Serial.print(".");
}
if (WiFi.status() == WL_CONNECTED) {
Serial.println("\nConnected!");
Serial.println(WiFi.localIP());
} else {
Serial.println("\nWiFi Connection Failed");
startAccessPoint();
}
} else {
startAccessPoint();
}
}

void loop() {
server.handleClient();
static unsigned long lastUpdate = 0;
if (millis() - lastUpdate > 600000) {
fetchWeather();
lastUpdate = millis();
}
}
